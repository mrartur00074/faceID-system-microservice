from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import db
from admin.key_boards import cancel_kb, group_kb, admin_kb

group_router = Router()


class Groups(StatesGroup):
    new_group = State()
    set_log_group = State()

@group_router.callback_query(F.data == "cancel")
async def cancel_registration(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.clear()
    await call.message.answer("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await call.message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {call.from_user.full_name}", reply_markup=admin_kb)


@group_router.callback_query(F.data == "add_group")
async def new_group(call: types.CallbackQuery, state: FSMContext):
    admin_data = db.get_admin()
    if not admin_data or call.from_user.id != admin_data[1]:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.message.delete()
    await state.set_state(Groups.new_group)
    await call.message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç", reply_markup=group_kb)
    await call.message.answer("–ò–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞", reply_markup=cancel_kb)


@group_router.callback_query(F.data == "clear_groups")
async def clear_groups(call: types.CallbackQuery):
    admin_data = db.get_admin()
    if not admin_data or call.from_user.id != admin_data[1]:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.message.delete()
    db.clear_table("groups")
    await call.message.answer("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –±—ã–ª –æ—á–∏—â–µ–Ω.")
    await call.message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {call.from_user.full_name}", reply_markup=admin_kb)


@group_router.message(Groups.new_group)
async def chat_shared(message: types.Message, state: FSMContext):
    await message.delete()

    if not message.chat_shared:
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.")
        return

    chat_id = message.chat_shared.chat_id

    if chat_id in [i[1] for i in db.get_groups()]:
        await message.answer(f"–ì—Ä—É–ø–ø–∞ —Å ID {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        db.new_group({"group_id": chat_id})
        await message.answer(f"–ì—Ä—É–ø–ø–∞ —Å ID {chat_id} –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    await state.clear()

    # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {message.from_user.full_name}", reply_markup=admin_kb)

@group_router.callback_query(F.data == "view_groups")
async def view_groups(call: types.CallbackQuery):
    admin_data = db.get_admin()
    if not admin_data or call.from_user.id != admin_data[1]:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.message.delete()

    groups = db.get_groups()
    if not groups:
        await call.message.answer("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.")
        return

    print(groups)

    group_list = "\n".join([f"‚Ä¢ {group[1]}" for group in groups])
    await call.message.answer(f"üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n{group_list}", reply_markup=admin_kb)

@group_router.callback_query(F.data == "set_log_group")
async def set_log_group(call: types.CallbackQuery, state: FSMContext):
    admin_data = db.get_admin()
    if not admin_data or call.from_user.id != admin_data[1]:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await call.message.delete()
    await state.set_state(Groups.set_log_group)
    await call.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=group_kb)
    await call.message.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –ª–æ–≥-–≥—Ä—É–ø–ø—ã...", reply_markup=cancel_kb)

@group_router.message(Groups.set_log_group, F.chat_shared)
async def process_log_group_selection(message: types.Message, state: FSMContext):
    group_id = message.chat_shared.chat_id
    db.set_log_group(group_id)

    await message.answer(f"–õ–æ–≥-–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: `{group_id}`", parse_mode="Markdown")
    await state.clear()