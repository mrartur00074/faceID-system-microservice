from aiogram import Router, types
from admin.key_boards import start_kb, admin_kb
from config import admin_command, db
from aiogram.filters import Command
from aiogram import Bot

admin_router = Router()

@admin_router.message(Command("start"))
async def start(message: types.Message):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª /start, –µ–≥–æ ID: {message.from_user.id}")
    if db.get_admin() and message.from_user.id == db.get_admin()[1]:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {message.from_user.full_name}", reply_markup=admin_kb)
    elif message.from_user.id in [i[1] for i in db.get_teachers()]:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {message.from_user.full_name}", reply_markup=start_kb)


# @admin_router.message(Command(admin_command))
# async def new_admin(message: types.Message):
#     if not db.get_admin()[1] if db.get_admin() else False:
#         db.new_teacher({"tg_id":message.from_user.id})
#         db.set_admin({"admin_id":message.from_user.id})
#         await message.answer("–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º –¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", reply_markup=admin_kb)


@admin_router.message(Command("admin"))
async def new_admin(message: types.Message, bot: Bot):
    args = message.text.strip().split()
    if len(args) > 1 and args[1] == admin_command:
        admin_data = db.get_admin()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
        if not admin_data or not admin_data[1]:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            db.new_teacher({"tg_id": message.from_user.id})
            db.set_admin({"admin_id": message.from_user.id})
            await message.answer("–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º –¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", reply_markup=admin_kb)
        else:
            chat = await bot.get_chat(admin_data[1])
            full_name = chat.full_name
            username = f"@{chat.username}" if chat.username else "‚Äî"

            await message.answer(
                f"üë§ –ê–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º—ã:\n"
                f"‚ñ™Ô∏è –ò–º—è: {full_name}\n"
                f"‚ñ™Ô∏è Username: {username}\n")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin <–∫–ª—é—á>")


@admin_router.message(Command("whoisadmin"))
async def who_is_admin(message: types.Message, bot: Bot):
    admin_data = db.get_admin()  # –û–∂–∏–¥–∞–µ–º: (id, tg_id)

    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç get_admin
    print(f"admin_data: {admin_data}")

    if admin_data and admin_data[1]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tg_id –∞–¥–º–∏–Ω–∞
        tg_id = admin_data[1]
        try:
            chat = await bot.get_chat(tg_id)
            full_name = chat.full_name
            username = f"@{chat.username}" if chat.username else "‚Äî"
            await message.answer(
                f"üë§ –ê–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º—ã:\n"
                f"‚ñ™Ô∏è –ò–º—è: {full_name}\n"
                f"‚ñ™Ô∏è Username: {username}\n"
                f"‚ñ™Ô∏è Telegram ID: {tg_id}"
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∞: {e}")
    else:
        await message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")