services:
  service-discovery:
    build:
      context: ./service-discover
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  number-reader:
    build:
      context: ./number-reader
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - kafka
    entrypoint: [ "/wait-for-kafka.sh", "kafka", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002" ]
    networks:
      - app-network
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}

  face-recognizer:
    build:
      context: ./face-recognizer
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - kafka
    entrypoint: [ "/wait-for-kafka.sh", "kafka", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001" ]
    networks:
      - app-network
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}

  tg-bot:
    build:
      context: ./tg-bot
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - TOKEN=${TG_TOKEN}
      - USERNAME=${TG_USERNAME}
      - PASSWORD=${TG_PASSWORD}
      - ADMIN_KEY=${TG_ADMIN_KEY}
      - API_ADDRESS=${BACKEND_API_ADDRESS}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - student_images:/app/images
    ports:
      - "8080:8080"
    depends_on:
      - db
      - kafka
      - redis
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    networks:
      - app-network


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: Django
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    networks:
      - app-network


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_BASE_URL=${VITE_BASE_URL}
        - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      - VITE_BASE_URL=${VITE_BASE_URL}
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --appendonly yes 

volumes:
  pgdata:
  student_images:
  redis_data:

networks:
  app-network: