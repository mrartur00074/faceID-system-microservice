services:
  number-reader:
    build:
      context: ./number-reader
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - kafka
    entrypoint: [ "/wait-for-kafka.sh", "kafka", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002" ]
    networks:
      - app-network

  face-recognizer:
    build:
      context: ./face-recognizer
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - kafka
    entrypoint: [ "/wait-for-kafka.sh", "kafka", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001" ]
    networks:
      - app-network

  tg-bot:
    build:
      context: ./tg-bot
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - db
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/Django
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: Django
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network: